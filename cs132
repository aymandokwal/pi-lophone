######################################################################
# Name: Ayman Dokwal
# Date: February 9, 2018
# Description: Creating a working basic calculator.
######################################################################
from Tkinter import *

# the main GUI class 
class MainGUI(Frame):
    # the constructor 
    def __init__(self, parent):
              Frame.__init__(self, parent, bg="white") 
              parent.attributes("-fullscreen", True) 
              self.setupGUI()

    # sets up the GUI 
    def setupGUI(self):
    
        
        # configure the rows and columns of the Frame to adjust
        #  to the window
        # there are 1 row 
        for row in range(10):
             Grid.rowconfigure(self, row, weight=1)
        # there are 8 columns 
        for col in range(8):
             Grid.columnconfigure(self, col, weight=1)
        

        # next, create the button (white background, no border,
        #  no highlighting, no color when clicked) 
        button = Button(self, bg="white",\
        borderwidth=0, highlightthickness=0,\
        activebackground="red", command=lambda:\
         self.process("("))

        # set the button's image 

        # put the button in its proper row and column
        img = PhotoImage(file="red.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=0, sticky=N+S+E+W)
        # the same is done for the rest of the buttons

        img = PhotoImage(file="orange.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=1, sticky=N+S+E+W)

        img = PhotoImage(file="yellow.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=2, sticky=N+S+E+W)

        img = PhotoImage(file="green.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=3, sticky=N+S+E+W)

        img = PhotoImage(file="lightblue.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=4, sticky=N+S+E+W)

        img = PhotoImage(file="blue.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=5, sticky=N+S+E+W)

        img = PhotoImage(file="violet.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=6, sticky=N+S+E+W)

        img = PhotoImage(file="pink.png")
        button = Button(self, bg="white",image=img, borderwidth=0, highlightthickness=0,\
        activebackground="white", command=lambda:\
         self.process(")"))
        button.image = img
        button.grid(row=4, column=7, sticky=N+S+E+W)

        

        # pack the GUI
        self.pack(fill=BOTH, expand=1)
        
    # processes button presses 
    def process(self, button):


        # AC clears the display 
        if (button == "AC"):
            # clear the display 
            self.display["text"] = ""


       # = starts an evaluation of whatever is on the display 
        elif (button == "="):
              # get the expression in the display 
              expr = self.display["text"] 
              # the evaluation may return an error!
              try:
                    # evaluate the expression 
                    result = eval(expr)
                    # store the result to the display 
                    self.display["text"] = str(result)

                    # makes it so that whenever the text is longer than 14 characters
                    if len(self.display["text"])>(14):
                        # it truncates any result more than 14 to 11 characters and ...
                        self.display["text"] = self.display["text"][:11]+"..."

              # handle if an error occurs during evaluation 
              except:
              # note the error in the display
                  self.display["text"] = "ERROR"

        # otherwise, just tack on the appropriate
        #  operand/operator 



        # adds a back button
        elif (button == "BS"):
            if len(self.display["text"]) > (0):
                self.display["text"] = self.display["text"][:-1]
 
        else:
            self.display["text"] += button
   
        # makes it so that the user cannot add more than 14 characters
        if len(self.display["text"])>(14):
            self.display["text"] = self.display["text"][:14]
                
    


##############################
# the main part of the program
##############################
# create the window 
window = Tk()
# set the window title 
window.title("The Reckoner")
# generate the GUI 
p = MainGUI(window)
# display the GUI and wait for user interaction 
window.mainloop()
